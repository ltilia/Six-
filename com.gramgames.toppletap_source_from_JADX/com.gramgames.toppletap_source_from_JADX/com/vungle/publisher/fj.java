package com.vungle.publisher;

import android.content.Context;
import android.content.SharedPreferences;
import android.media.AudioManager;
import android.net.ConnectivityManager;
import android.telephony.TelephonyManager;
import android.view.WindowManager;
import com.vungle.publisher.FullScreenAdActivity.AdEventListener;
import com.vungle.publisher.FullScreenAdActivity.AdEventListener.Factory_Factory;
import com.vungle.publisher.FullScreenAdActivity.AdEventListener.Factory_MembersInjector;
import com.vungle.publisher.FullScreenAdActivity.AdEventListener_Factory;
import com.vungle.publisher.FullScreenAdActivity.AdEventListener_MembersInjector;
import com.vungle.publisher.InitializationEventListener.GlobalEventListener_Factory;
import com.vungle.publisher.InitializationEventListener.GlobalEventListener_MembersInjector;
import com.vungle.publisher.InitializationEventListener.InitialConfigUpdatedEventListener_Factory;
import com.vungle.publisher.InitializationEventListener.InitialConfigUpdatedEventListener_MembersInjector;
import com.vungle.publisher.ad.AdManager;
import com.vungle.publisher.ad.AdManager.AdAvailabilityEventListener_Factory;
import com.vungle.publisher.ad.AdManager.PlayAdEventListener;
import com.vungle.publisher.ad.AdManager.PlayAdEventListener_Factory;
import com.vungle.publisher.ad.AdManager.PrepareStreamingAdEventListener;
import com.vungle.publisher.ad.AdManager.PrepareStreamingAdEventListener_Factory;
import com.vungle.publisher.ad.AdManager_Factory;
import com.vungle.publisher.ad.AdPreparer;
import com.vungle.publisher.ad.AdPreparer.ViewablePreparationListener;
import com.vungle.publisher.ad.AdPreparer.ViewablePreparationListener_Factory;
import com.vungle.publisher.ad.AdPreparer_Factory;
import com.vungle.publisher.ad.event.VolumeChangeEvent;
import com.vungle.publisher.ad.prepare.PrepareAdRunnable;
import com.vungle.publisher.ad.prepare.PrepareAdRunnable.RetryMap;
import com.vungle.publisher.ad.prepare.PrepareAdRunnable.RetryMap_Factory;
import com.vungle.publisher.ad.prepare.PrepareAdRunnable_Factory;
import com.vungle.publisher.ad.prepare.PrepareViewableRunnable;
import com.vungle.publisher.ad.prepare.PrepareViewableRunnable_Factory;
import com.vungle.publisher.async.ScheduledPriorityExecutor;
import com.vungle.publisher.async.ScheduledPriorityExecutor_Factory;
import com.vungle.publisher.audio.VolumeChangeContentObserver;
import com.vungle.publisher.audio.VolumeChangeContentObserver_Factory;
import com.vungle.publisher.db.DatabaseBroadcastReceiver;
import com.vungle.publisher.db.DatabaseBroadcastReceiver_Factory;
import com.vungle.publisher.db.DatabaseHelper;
import com.vungle.publisher.db.DatabaseHelper_Factory;
import com.vungle.publisher.db.model.AdReport;
import com.vungle.publisher.db.model.AdReportExtra;
import com.vungle.publisher.db.model.AdReportExtra_Factory;
import com.vungle.publisher.db.model.ArchiveEntry;
import com.vungle.publisher.db.model.ArchiveEntry_Factory;
import com.vungle.publisher.db.model.EventTracking;
import com.vungle.publisher.db.model.EventTrackingHttpLogEntry;
import com.vungle.publisher.db.model.EventTrackingHttpLogEntry_Factory;
import com.vungle.publisher.db.model.EventTracking_Factory;
import com.vungle.publisher.db.model.LocalAd;
import com.vungle.publisher.db.model.LocalAdPlay;
import com.vungle.publisher.db.model.LocalAdPlay_Factory;
import com.vungle.publisher.db.model.LocalAdReport;
import com.vungle.publisher.db.model.LocalAdReportEvent;
import com.vungle.publisher.db.model.LocalAdReportEvent_Factory;
import com.vungle.publisher.db.model.LocalAdReport_Factory;
import com.vungle.publisher.db.model.LocalAd_Factory;
import com.vungle.publisher.db.model.LocalArchive;
import com.vungle.publisher.db.model.LocalArchive_Factory;
import com.vungle.publisher.db.model.LocalVideo;
import com.vungle.publisher.db.model.LocalVideo_Factory;
import com.vungle.publisher.db.model.LocalViewableDelegate;
import com.vungle.publisher.db.model.LocalViewableDelegate_Factory;
import com.vungle.publisher.db.model.LoggedException;
import com.vungle.publisher.db.model.LoggedException_Factory;
import com.vungle.publisher.db.model.StreamingAd;
import com.vungle.publisher.db.model.StreamingAdPlay;
import com.vungle.publisher.db.model.StreamingAdPlay_Factory;
import com.vungle.publisher.db.model.StreamingAdReport;
import com.vungle.publisher.db.model.StreamingAdReportEvent;
import com.vungle.publisher.db.model.StreamingAdReportEvent_Factory;
import com.vungle.publisher.db.model.StreamingAdReport_Factory;
import com.vungle.publisher.db.model.StreamingAd_Factory;
import com.vungle.publisher.db.model.StreamingVideo;
import com.vungle.publisher.db.model.StreamingVideo_Factory;
import com.vungle.publisher.db.model.Viewable;
import com.vungle.publisher.device.AudioHelper;
import com.vungle.publisher.device.AudioHelper_Factory;
import com.vungle.publisher.device.ExternalStorageStateBroadcastReceiver;
import com.vungle.publisher.device.ExternalStorageStateBroadcastReceiver_Factory;
import com.vungle.publisher.device.data.AppFingerprint;
import com.vungle.publisher.device.data.AppFingerprintManager;
import com.vungle.publisher.device.data.AppFingerprintManager_Factory;
import com.vungle.publisher.device.data.AppFingerprint_Factory;
import com.vungle.publisher.display.controller.AdWebChromeClient;
import com.vungle.publisher.display.controller.AdWebChromeClient_Factory;
import com.vungle.publisher.display.controller.AdWebViewClient;
import com.vungle.publisher.display.controller.AdWebViewClient_Factory;
import com.vungle.publisher.display.controller.WebViewConfig;
import com.vungle.publisher.display.controller.WebViewConfig_Factory;
import com.vungle.publisher.display.view.AlertDialogFactory;
import com.vungle.publisher.display.view.AlertDialogFactory_Factory;
import com.vungle.publisher.display.view.DisplayUtils;
import com.vungle.publisher.display.view.DisplayUtils_Factory;
import com.vungle.publisher.display.view.MuteButton;
import com.vungle.publisher.display.view.PostRollFragment;
import com.vungle.publisher.display.view.PostRollFragment_Factory;
import com.vungle.publisher.display.view.PrivacyButton;
import com.vungle.publisher.display.view.ProgressBar;
import com.vungle.publisher.display.view.VideoFragment;
import com.vungle.publisher.display.view.VideoFragment.VideoEventListener;
import com.vungle.publisher.display.view.VideoFragment.VideoEventListener_Factory;
import com.vungle.publisher.display.view.VideoFragment_Factory;
import com.vungle.publisher.display.view.WebViewFactory;
import com.vungle.publisher.display.view.WebViewFactory_Factory;
import com.vungle.publisher.env.AdvertisingDeviceIdStrategy;
import com.vungle.publisher.env.AdvertisingDeviceIdStrategy_Factory;
import com.vungle.publisher.env.AndroidDevice;
import com.vungle.publisher.env.AndroidDevice.DeviceIdStrategy;
import com.vungle.publisher.env.AndroidDevice_Factory;
import com.vungle.publisher.env.SdkConfig;
import com.vungle.publisher.env.SdkConfig_Factory;
import com.vungle.publisher.env.SdkState;
import com.vungle.publisher.env.SdkState.AdThrottleEndRunnable;
import com.vungle.publisher.env.SdkState.AdThrottleEndRunnable_Factory;
import com.vungle.publisher.env.SdkState.EndAdEventListener_Factory;
import com.vungle.publisher.env.SdkState_Factory;
import com.vungle.publisher.env.WrapperFramework;
import com.vungle.publisher.event.ClientEventListenerAdapter;
import com.vungle.publisher.event.ClientEventListenerAdapter.Factory;
import com.vungle.publisher.event.ClientEventListenerAdapter_Factory;
import com.vungle.publisher.event.EventBus;
import com.vungle.publisher.event.EventBus_Factory;
import com.vungle.publisher.exception.ExceptionManager;
import com.vungle.publisher.exception.ExceptionManager_Factory;
import com.vungle.publisher.file.CacheManager;
import com.vungle.publisher.file.CacheManager_Factory;
import com.vungle.publisher.image.AssetBitmapFactory;
import com.vungle.publisher.image.AssetBitmapFactory_Factory;
import com.vungle.publisher.image.BitmapFactory;
import com.vungle.publisher.inject.CoreModule_ProvideAdTempDirectoryFactory;
import com.vungle.publisher.inject.CoreModule_ProvideApplicationContextFactory;
import com.vungle.publisher.inject.CoreModule_ProvideAudioManagerFactory;
import com.vungle.publisher.inject.CoreModule_ProvideBitmapFactoryFactory;
import com.vungle.publisher.inject.CoreModule_ProvideConnectivityManagerFactory;
import com.vungle.publisher.inject.CoreModule_ProvideDeviceFactory;
import com.vungle.publisher.inject.CoreModule_ProvideEnvSharedPreferencesFactory;
import com.vungle.publisher.inject.CoreModule_ProvideFullScreenAdActivityClassFactory;
import com.vungle.publisher.inject.CoreModule_ProvideGoogleAggregateDetailedLocationProviderFactory;
import com.vungle.publisher.inject.CoreModule_ProvideLocationFactory;
import com.vungle.publisher.inject.CoreModule_ProvideNetworkFactory;
import com.vungle.publisher.inject.CoreModule_ProvideOldAdTempDirectoryFactory;
import com.vungle.publisher.inject.CoreModule_ProvidePublisherAppFactory;
import com.vungle.publisher.inject.CoreModule_ProvideTelephonyManagerFactory;
import com.vungle.publisher.inject.CoreModule_ProvideWindowManagerFactory;
import com.vungle.publisher.inject.CoreModule_ProvideWrapperFrameworkFactory;
import com.vungle.publisher.inject.CoreModule_ProvideWrapperFrameworkVersionFactory;
import com.vungle.publisher.inject.EndpointModule;
import com.vungle.publisher.inject.EndpointModule_ProvideIngestBaseUrlFactory;
import com.vungle.publisher.inject.EndpointModule_ProvideVungleBaseUrlFactory;
import com.vungle.publisher.inject.IdStrategyModule_ProvideDeviceIdStrategyFactory;
import com.vungle.publisher.inject.VungleMainComponent;
import com.vungle.publisher.location.AndroidLocation;
import com.vungle.publisher.location.AndroidLocation_Factory;
import com.vungle.publisher.location.GoogleAggregateDetailedLocationProvider_Factory;
import com.vungle.publisher.net.AndroidNetwork;
import com.vungle.publisher.net.AndroidNetwork_Factory;
import com.vungle.publisher.net.NetworkBroadcastReceiver;
import com.vungle.publisher.net.NetworkBroadcastReceiver_Factory;
import com.vungle.publisher.net.http.AppFingerprintHttpRequest;
import com.vungle.publisher.net.http.AppFingerprintHttpRequest_Factory;
import com.vungle.publisher.net.http.AppFingerprintHttpResponseHandler;
import com.vungle.publisher.net.http.AppFingerprintHttpResponseHandler_Factory;
import com.vungle.publisher.net.http.AppFingerprintHttpTransactionFactory;
import com.vungle.publisher.net.http.AppFingerprintHttpTransactionFactory_Factory;
import com.vungle.publisher.net.http.DownloadHttpGateway;
import com.vungle.publisher.net.http.DownloadHttpGateway_Factory;
import com.vungle.publisher.net.http.DownloadHttpRequest;
import com.vungle.publisher.net.http.DownloadHttpResponseHandler;
import com.vungle.publisher.net.http.DownloadHttpResponseHandler_Factory;
import com.vungle.publisher.net.http.DownloadHttpTransactionFactory;
import com.vungle.publisher.net.http.DownloadHttpTransactionFactory_Factory;
import com.vungle.publisher.net.http.ExternalHttpGateway_Factory;
import com.vungle.publisher.net.http.FireAndForgetHttpResponseHandler;
import com.vungle.publisher.net.http.FireAndForgetHttpResponseHandler_Factory;
import com.vungle.publisher.net.http.HttpRequestChainElement;
import com.vungle.publisher.net.http.HttpRequestChainElement_Factory;
import com.vungle.publisher.net.http.HttpResponse;
import com.vungle.publisher.net.http.HttpResponse_Factory;
import com.vungle.publisher.net.http.HttpTransaction;
import com.vungle.publisher.net.http.HttpTransaction_Factory;
import com.vungle.publisher.net.http.HttpTransport;
import com.vungle.publisher.net.http.HttpTransport_Factory;
import com.vungle.publisher.net.http.HttpURLConnectionFactory;
import com.vungle.publisher.net.http.HttpURLConnectionFactory_Factory;
import com.vungle.publisher.net.http.IngestHttpGateway_Factory;
import com.vungle.publisher.net.http.ReportExceptionsHttpRequest;
import com.vungle.publisher.net.http.ReportExceptionsHttpRequest_Factory;
import com.vungle.publisher.net.http.ReportExceptionsHttpResponseHandler;
import com.vungle.publisher.net.http.ReportExceptionsHttpResponseHandler_Factory;
import com.vungle.publisher.net.http.ReportExceptionsHttpTransactionFactory;
import com.vungle.publisher.net.http.ReportExceptionsHttpTransactionFactory_Factory;
import com.vungle.publisher.net.http.TrackEventHttpRequest;
import com.vungle.publisher.net.http.TrackEventHttpResponseHandler;
import com.vungle.publisher.net.http.TrackEventHttpResponseHandler_Factory;
import com.vungle.publisher.net.http.TrackEventHttpTransactionFactory;
import com.vungle.publisher.net.http.TrackEventHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.EventTrackingHttpLogEntryDeleteDelegate_Factory;
import com.vungle.publisher.protocol.ProtocolHttpGateway;
import com.vungle.publisher.protocol.ProtocolHttpGateway.PrepareLocalAdEventListener_Factory;
import com.vungle.publisher.protocol.ProtocolHttpGateway_Factory;
import com.vungle.publisher.protocol.ReportAdHttpTransactionFactory;
import com.vungle.publisher.protocol.ReportAdHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.ReportLocalAdHttpRequest;
import com.vungle.publisher.protocol.ReportLocalAdHttpResponseHandler_Factory;
import com.vungle.publisher.protocol.ReportStreamingAdHttpRequest;
import com.vungle.publisher.protocol.ReportStreamingAdHttpResponseHandler_Factory;
import com.vungle.publisher.protocol.RequestConfigAsync;
import com.vungle.publisher.protocol.RequestConfigAsync.RequestConfigRunnable_Factory;
import com.vungle.publisher.protocol.RequestConfigAsync_Factory;
import com.vungle.publisher.protocol.RequestConfigHttpRequest;
import com.vungle.publisher.protocol.RequestConfigHttpRequest_Factory;
import com.vungle.publisher.protocol.RequestConfigHttpResponseHandler_Factory;
import com.vungle.publisher.protocol.RequestConfigHttpTransactionFactory;
import com.vungle.publisher.protocol.RequestConfigHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.RequestLocalAdHttpRequest;
import com.vungle.publisher.protocol.RequestLocalAdHttpResponseHandler;
import com.vungle.publisher.protocol.RequestLocalAdHttpResponseHandler_Factory;
import com.vungle.publisher.protocol.RequestLocalAdHttpTransactionFactory;
import com.vungle.publisher.protocol.RequestLocalAdHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.RequestStreamingAdHttpRequest;
import com.vungle.publisher.protocol.RequestStreamingAdHttpResponseHandler;
import com.vungle.publisher.protocol.RequestStreamingAdHttpResponseHandler_Factory;
import com.vungle.publisher.protocol.RequestStreamingAdHttpTransactionFactory;
import com.vungle.publisher.protocol.RequestStreamingAdHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.SessionEndHttpRequest;
import com.vungle.publisher.protocol.SessionEndHttpTransactionFactory;
import com.vungle.publisher.protocol.SessionEndHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.SessionStartHttpRequest;
import com.vungle.publisher.protocol.SessionStartHttpTransactionFactory;
import com.vungle.publisher.protocol.SessionStartHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.TrackInstallHttpRequest;
import com.vungle.publisher.protocol.TrackInstallHttpResponseHandler;
import com.vungle.publisher.protocol.TrackInstallHttpResponseHandler_Factory;
import com.vungle.publisher.protocol.TrackInstallHttpTransactionFactory;
import com.vungle.publisher.protocol.TrackInstallHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.UnfilledAdHttpRequest;
import com.vungle.publisher.protocol.UnfilledAdHttpTransactionFactory;
import com.vungle.publisher.protocol.UnfilledAdHttpTransactionFactory_Factory;
import com.vungle.publisher.protocol.message.ExtraInfo;
import com.vungle.publisher.protocol.message.ReportExceptions;
import com.vungle.publisher.protocol.message.ReportExceptions_Factory;
import com.vungle.publisher.protocol.message.ReportLocalAd;
import com.vungle.publisher.protocol.message.ReportLocalAd.Factory.PlayFactory.UserActionFactory_Factory;
import com.vungle.publisher.protocol.message.ReportLocalAd.Factory.PlayFactory_Factory;
import com.vungle.publisher.protocol.message.ReportStreamingAd;
import com.vungle.publisher.protocol.message.ReportStreamingAd.Factory.PlayFactory;
import com.vungle.publisher.protocol.message.RequestAd.Demographic;
import com.vungle.publisher.protocol.message.RequestAd.Demographic.Location;
import com.vungle.publisher.protocol.message.RequestAd.DeviceInfo;
import com.vungle.publisher.protocol.message.RequestAd.DeviceInfo.DisplayDimension;
import com.vungle.publisher.protocol.message.RequestAdResponse.CallToActionOverlay;
import com.vungle.publisher.protocol.message.RequestAdResponse.ThirdPartyAdTracking;
import com.vungle.publisher.protocol.message.RequestAdResponse.ThirdPartyAdTracking.PlayCheckpoint;
import com.vungle.publisher.protocol.message.RequestConfig;
import com.vungle.publisher.protocol.message.RequestConfigResponse;
import com.vungle.publisher.protocol.message.RequestConfig_Factory;
import com.vungle.publisher.protocol.message.RequestLocalAd;
import com.vungle.publisher.protocol.message.RequestLocalAd.HttpLogEntry;
import com.vungle.publisher.protocol.message.RequestLocalAdResponse;
import com.vungle.publisher.protocol.message.RequestStreamingAd;
import com.vungle.publisher.protocol.message.RequestStreamingAdResponse;
import com.vungle.publisher.protocol.message.SessionEnd;
import com.vungle.publisher.protocol.message.SessionStart;
import com.vungle.publisher.reporting.AdReportEventListener;
import com.vungle.publisher.reporting.AdReportEventListener_Factory;
import com.vungle.publisher.reporting.AdReportManager;
import com.vungle.publisher.reporting.AdReportManager_Factory;
import com.vungle.publisher.reporting.AdServiceReportingHandler;
import com.vungle.publisher.reporting.AdServiceReportingHandler_Factory;
import com.vungle.publisher.util.IntentFactory;
import com.vungle.publisher.util.IntentFactory_Factory;
import com.vungle.publisher.util.ViewUtils;
import com.vungle.publisher.util.ViewUtils_Factory;
import dagger.MembersInjector;
import dagger.internal.DelegateFactory;
import dagger.internal.MembersInjectors;
import dagger.internal.ScopedProvider;
import javax.inject.Provider;

/* compiled from: vungle */
public final class fj implements VungleMainComponent {
    static final /* synthetic */ boolean a;
    private MembersInjector<Factory> A;
    private Provider<Factory> B;
    private MembersInjector<SdkConfig> C;
    private Provider<SdkConfig> D;
    private MembersInjector<LoggedException> E;
    private Provider<LoggedException> F;
    private MembersInjector<LoggedException.Factory> G;
    private Provider<LoggedException.Factory> H;
    private MembersInjector<ScheduledPriorityExecutor> I;
    private Provider<ScheduledPriorityExecutor> J;
    private MembersInjector<DatabaseHelper> K;
    private Provider<DatabaseHelper> L;
    private MembersInjector<AdReportExtra> M;
    private Provider<AdReportExtra> N;
    private MembersInjector<AdReportExtra.Factory> O;
    private Provider<AdReportExtra.Factory> P;
    private MembersInjector<EventTracking> Q;
    private Provider<EventTracking> R;
    private MembersInjector<EventTracking.Factory> S;
    private Provider<EventTracking.Factory> T;
    private MembersInjector<ArchiveEntry> U;
    private Provider<ArchiveEntry> V;
    private MembersInjector<ArchiveEntry.Factory> W;
    private Provider<ArchiveEntry.Factory> X;
    private Provider<HttpURLConnectionFactory> Y;
    private MembersInjector<HttpResponse.Factory> Z;
    private MembersInjector<NetworkBroadcastReceiver> aA;
    private Provider<NetworkBroadcastReceiver> aB;
    private MembersInjector<AdThrottleEndRunnable> aC;
    private Provider<AdThrottleEndRunnable> aD;
    private MembersInjector aE;
    private Provider aF;
    private MembersInjector<fp> aG;
    private Provider<fp> aH;
    private Provider<fo> aI;
    private MembersInjector<AndroidLocation> aJ;
    private Provider<AndroidLocation> aK;
    private Provider<ft> aL;
    private Provider<String> aM;
    private Provider<String> aN;
    private Provider aO;
    private Provider aP;
    private MembersInjector aQ;
    private Provider aR;
    private Provider<Demographic> aS;
    private MembersInjector aT;
    private Provider aU;
    private MembersInjector aV;
    private Provider aW;
    private Provider<AdConfig> aX;
    private MembersInjector aY;
    private Provider aZ;
    private Provider<HttpResponse.Factory> aa;
    private MembersInjector<HttpRequestChainElement.Factory> ab;
    private Provider<HttpRequestChainElement.Factory> ac;
    private MembersInjector<HttpTransport> ad;
    private Provider<HttpTransport> ae;
    private MembersInjector<HttpTransaction> af;
    private Provider<HttpTransaction> ag;
    private MembersInjector<DownloadHttpRequest.Factory> ah;
    private Provider<DownloadHttpRequest.Factory> ai;
    private MembersInjector<DownloadHttpResponseHandler> aj;
    private Provider<DownloadHttpResponseHandler> ak;
    private MembersInjector<DownloadHttpResponseHandler.Factory> al;
    private Provider<DownloadHttpResponseHandler.Factory> am;
    private MembersInjector<DownloadHttpTransactionFactory> an;
    private Provider<DownloadHttpTransactionFactory> ao;
    private MembersInjector<DownloadHttpGateway> ap;
    private Provider<DownloadHttpGateway> aq;
    private MembersInjector<DatabaseBroadcastReceiver> ar;
    private Provider<DatabaseBroadcastReceiver> as;
    private MembersInjector<ExternalStorageStateBroadcastReceiver> at;
    private Provider<ExternalStorageStateBroadcastReceiver> au;
    private Provider<ConnectivityManager> av;
    private Provider<TelephonyManager> aw;
    private MembersInjector<AndroidNetwork> ax;
    private Provider<AndroidNetwork> ay;
    private Provider<fw> az;
    private Provider<EventBus> b;
    private MembersInjector bA;
    private Provider bB;
    private MembersInjector<ReportAdHttpTransactionFactory> bC;
    private Provider<ReportAdHttpTransactionFactory> bD;
    private Provider<RequestConfigHttpRequest> bE;
    private MembersInjector<RequestConfig> bF;
    private Provider<RequestConfig> bG;
    private MembersInjector<RequestConfigHttpRequest.Factory> bH;
    private Provider<RequestConfigHttpRequest.Factory> bI;
    private Provider<RequestConfigResponse.Factory> bJ;
    private MembersInjector bK;
    private Provider bL;
    private MembersInjector<RequestConfigAsync> bM;
    private Provider<RequestConfigAsync> bN;
    private MembersInjector<hr> bO;
    private Provider<hr> bP;
    private MembersInjector<RequestConfigHttpTransactionFactory> bQ;
    private Provider<RequestConfigHttpTransactionFactory> bR;
    private MembersInjector<RequestLocalAdHttpRequest.Factory> bS;
    private Provider<RequestLocalAdHttpRequest.Factory> bT;
    private Provider<AdServiceReportingHandler> bU;
    private Provider bV;
    private Provider bW;
    private MembersInjector bX;
    private Provider bY;
    private MembersInjector<RequestLocalAdResponse.Factory> bZ;
    private MembersInjector ba;
    private Provider bb;
    private MembersInjector<EventTrackingHttpLogEntry> bc;
    private Provider<EventTrackingHttpLogEntry> bd;
    private MembersInjector<EventTrackingHttpLogEntry.Factory> be;
    private Provider<EventTrackingHttpLogEntry.Factory> bf;
    private Provider bg;
    private MembersInjector<RequestLocalAd.Factory> bh;
    private Provider<RequestLocalAd.Factory> bi;
    private MembersInjector<ReportLocalAd.Factory> bj;
    private Provider<ReportLocalAd.Factory> bk;
    private MembersInjector<ReportLocalAdHttpRequest.Factory> bl;
    private Provider<ReportLocalAdHttpRequest.Factory> bm;
    private MembersInjector bn;
    private Provider bo;
    private MembersInjector bp;
    private Provider bq;
    private Provider br;
    private MembersInjector bs;
    private Provider bt;
    private MembersInjector<RequestStreamingAd.Factory> bu;
    private Provider<RequestStreamingAd.Factory> bv;
    private MembersInjector<ReportStreamingAd.Factory> bw;
    private Provider<ReportStreamingAd.Factory> bx;
    private MembersInjector<ReportStreamingAdHttpRequest.Factory> by;
    private Provider<ReportStreamingAdHttpRequest.Factory> bz;
    private MembersInjector<AdEventListener> c;
    private Provider<SessionStartHttpRequest.Factory> cA;
    private MembersInjector<SessionStartHttpTransactionFactory> cB;
    private Provider<SessionStartHttpTransactionFactory> cC;
    private MembersInjector<TrackInstallHttpRequest.Factory> cD;
    private Provider<TrackInstallHttpRequest.Factory> cE;
    private MembersInjector<TrackInstallHttpResponseHandler> cF;
    private Provider<TrackInstallHttpResponseHandler> cG;
    private MembersInjector<TrackInstallHttpTransactionFactory> cH;
    private Provider<TrackInstallHttpTransactionFactory> cI;
    private MembersInjector<UnfilledAdHttpRequest.Factory> cJ;
    private Provider<UnfilledAdHttpRequest.Factory> cK;
    private MembersInjector<UnfilledAdHttpTransactionFactory> cL;
    private Provider<UnfilledAdHttpTransactionFactory> cM;
    private MembersInjector<ProtocolHttpGateway> cN;
    private Provider<ProtocolHttpGateway> cO;
    private MembersInjector cP;
    private Provider cQ;
    private MembersInjector<SdkState> cR;
    private Provider<SdkState> cS;
    private MembersInjector cT;
    private Provider cU;
    private MembersInjector<LocalArchive> cV;
    private Provider<LocalArchive> cW;
    private MembersInjector cX;
    private Provider cY;
    private MembersInjector<LocalArchive.Factory> cZ;
    private Provider<RequestLocalAdResponse.Factory> ca;
    private MembersInjector<RequestLocalAdHttpResponseHandler> cb;
    private Provider<RequestLocalAdHttpResponseHandler> cc;
    private MembersInjector<RequestLocalAdHttpTransactionFactory> cd;
    private Provider<RequestLocalAdHttpTransactionFactory> ce;
    private MembersInjector<RequestStreamingAdHttpRequest.Factory> cf;
    private Provider<RequestStreamingAdHttpRequest.Factory> cg;
    private MembersInjector<RequestStreamingAdResponse.Factory> ch;
    private Provider<RequestStreamingAdResponse.Factory> ci;
    private MembersInjector<RequestStreamingAdHttpResponseHandler> cj;
    private Provider<RequestStreamingAdHttpResponseHandler> ck;
    private MembersInjector<RequestStreamingAdHttpTransactionFactory> cl;
    private Provider<RequestStreamingAdHttpTransactionFactory> cm;
    private MembersInjector<SafeBundleAdConfigFactory> cn;
    private Provider<SafeBundleAdConfigFactory> co;
    private MembersInjector<SessionStart.Factory> cp;
    private Provider<SessionStart.Factory> cq;
    private MembersInjector<SessionEnd.Factory> cr;
    private Provider<SessionEnd.Factory> cs;
    private MembersInjector<SessionEndHttpRequest.Factory> ct;
    private Provider<SessionEndHttpRequest.Factory> cu;
    private MembersInjector<FireAndForgetHttpResponseHandler> cv;
    private Provider<FireAndForgetHttpResponseHandler> cw;
    private MembersInjector<SessionEndHttpTransactionFactory> cx;
    private Provider<SessionEndHttpTransactionFactory> cy;
    private MembersInjector<SessionStartHttpRequest.Factory> cz;
    private Provider<AdEventListener> d;
    private Provider<StreamingAdReportEvent.Factory> dA;
    private MembersInjector<StreamingAdPlay> dB;
    private Provider<StreamingAdPlay> dC;
    private MembersInjector<StreamingAdPlay.Factory> dD;
    private Provider<StreamingAdPlay.Factory> dE;
    private MembersInjector<StreamingAd> dF;
    private Provider<StreamingAd> dG;
    private MembersInjector<StreamingVideo> dH;
    private Provider<StreamingVideo> dI;
    private MembersInjector dJ;
    private Provider dK;
    private MembersInjector<StreamingAd.Factory> dL;
    private Provider<StreamingAd.Factory> dM;
    private MembersInjector<StreamingAdReport> dN;
    private Provider<StreamingAdReport> dO;
    private MembersInjector<StreamingAdReport.Factory> dP;
    private Provider<StreamingAdReport.Factory> dQ;
    private MembersInjector<AdReport.Factory> dR;
    private Provider<AdReport.Factory> dS;
    private MembersInjector<AdReportManager> dT;
    private Provider<AdReportManager> dU;
    private MembersInjector<PrepareViewableRunnable> dV;
    private Provider<PrepareViewableRunnable> dW;
    private MembersInjector<PrepareViewableRunnable.Factory> dX;
    private Provider<PrepareViewableRunnable.Factory> dY;
    private Provider<RetryMap> dZ;
    private Provider<LocalArchive.Factory> da;
    private MembersInjector<Viewable.Factory> db;
    private Provider<Viewable.Factory> dc;
    private MembersInjector<LocalAd> dd;
    private Provider<LocalAd> de;
    private MembersInjector<LocalVideo> df;
    private Provider<LocalVideo> dg;
    private MembersInjector dh;
    private Provider di;
    private MembersInjector<LocalAd.Factory> dj;
    private Provider<LocalAd.Factory> dk;
    private MembersInjector<LocalAdReportEvent> dl;
    private Provider<LocalAdReportEvent> dm;
    private MembersInjector<LocalAdReportEvent.Factory> dn;
    private Provider<LocalAdReportEvent.Factory> do;
    private MembersInjector<LocalAdPlay> dp;
    private Provider<LocalAdPlay> dq;
    private MembersInjector<LocalAdPlay.Factory> dr;
    private Provider<LocalAdPlay.Factory> ds;
    private MembersInjector<LocalAdReport> dt;
    private Provider<LocalAdReport> du;
    private MembersInjector<LocalAdReport.Factory> dv;
    private Provider<LocalAdReport.Factory> dw;
    private MembersInjector<StreamingAdReportEvent> dx;
    private Provider<StreamingAdReportEvent> dy;
    private MembersInjector<StreamingAdReportEvent.Factory> dz;
    private MembersInjector<AdEventListener.Factory> e;
    private Provider<AdReportEventListener> eA;
    private MembersInjector<AdReportEventListener.Factory> eB;
    private Provider<AdReportEventListener.Factory> eC;
    private Provider<AlertDialogFactory> eD;
    private MembersInjector<AssetBitmapFactory> eE;
    private Provider<AssetBitmapFactory> eF;
    private Provider<BitmapFactory> eG;
    private MembersInjector<DisplayUtils> eH;
    private Provider<DisplayUtils> eI;
    private MembersInjector<ViewUtils> eJ;
    private Provider<ViewUtils> eK;
    private MembersInjector<PrivacyButton.Factory> eL;
    private Provider<PrivacyButton.Factory> eM;
    private MembersInjector<ProgressBar.Factory> eN;
    private Provider<ProgressBar.Factory> eO;
    private MembersInjector<MuteButton.Factory> eP;
    private Provider<MuteButton.Factory> eQ;
    private MembersInjector<VolumeChangeEvent.Factory> eR;
    private Provider<VolumeChangeEvent.Factory> eS;
    private MembersInjector<VolumeChangeContentObserver> eT;
    private Provider<VolumeChangeContentObserver> eU;
    private MembersInjector eV;
    private Provider eW;
    private MembersInjector eX;
    private Provider eY;
    private MembersInjector<VideoFragment> eZ;
    private MembersInjector<PrepareAdRunnable> ea;
    private Provider<PrepareAdRunnable> eb;
    private MembersInjector<PrepareAdRunnable.Factory> ec;
    private Provider<PrepareAdRunnable.Factory> ed;
    private MembersInjector<ViewablePreparationListener> ee;
    private Provider<ViewablePreparationListener> ef;
    private MembersInjector<AdPreparer> eg;
    private Provider<AdPreparer> eh;
    private Provider<Class> ei;
    private MembersInjector<PlayAdEventListener> ej;
    private Provider<PlayAdEventListener> ek;
    private MembersInjector el;
    private Provider em;
    private MembersInjector<PrepareStreamingAdEventListener> en;
    private Provider<PrepareStreamingAdEventListener> eo;
    private MembersInjector<AdManager> ep;
    private Provider<AdManager> eq;
    private MembersInjector<TrackEventHttpRequest.Factory> er;
    private Provider<TrackEventHttpRequest.Factory> es;
    private MembersInjector<TrackEventHttpResponseHandler> et;
    private Provider<TrackEventHttpResponseHandler> eu;
    private MembersInjector<TrackEventHttpTransactionFactory> ev;
    private Provider<TrackEventHttpTransactionFactory> ew;
    private MembersInjector<gh> ex;
    private Provider<gh> ey;
    private MembersInjector<AdReportEventListener> ez;
    private Provider<AdEventListener.Factory> f;
    private MembersInjector<ReportExceptionsHttpResponseHandler.Factory> fA;
    private Provider<ReportExceptionsHttpResponseHandler.Factory> fB;
    private MembersInjector<ReportExceptionsHttpTransactionFactory> fC;
    private Provider<ReportExceptionsHttpTransactionFactory> fD;
    private Provider<AppFingerprintHttpRequest> fE;
    private MembersInjector<AppFingerprintHttpRequest.Factory> fF;
    private Provider<AppFingerprintHttpRequest.Factory> fG;
    private MembersInjector<AppFingerprintHttpResponseHandler> fH;
    private Provider<AppFingerprintHttpResponseHandler> fI;
    private MembersInjector<AppFingerprintHttpTransactionFactory> fJ;
    private Provider<AppFingerprintHttpTransactionFactory> fK;
    private MembersInjector<gu> fL;
    private Provider<gu> fM;
    private MembersInjector<ExceptionManager> fN;
    private Provider<ExceptionManager> fO;
    private MembersInjector fP;
    private Provider fQ;
    private Provider<AppFingerprint> fR;
    private MembersInjector<AppFingerprint.Factory> fS;
    private Provider<AppFingerprint.Factory> fT;
    private MembersInjector<AppFingerprintManager> fU;
    private Provider<AppFingerprintManager> fV;
    private MembersInjector fW;
    private Provider fX;
    private MembersInjector<InitializationEventListener> fY;
    private Provider<InitializationEventListener> fZ;
    private Provider<VideoFragment> fa;
    private MembersInjector<VideoFragment.Factory> fb;
    private Provider<VideoFragment.Factory> fc;
    private Provider<WebViewConfig> fd;
    private MembersInjector<AdWebViewClient> fe;
    private Provider<AdWebViewClient> ff;
    private MembersInjector<WebViewFactory> fg;
    private Provider<WebViewFactory> fh;
    private MembersInjector<AdWebChromeClient> fi;
    private Provider<AdWebChromeClient> fj;
    private MembersInjector<PostRollFragment> fk;
    private Provider<PostRollFragment> fl;
    private MembersInjector<PostRollFragment.Factory> fm;
    private Provider<PostRollFragment.Factory> fn;
    private Provider<IntentFactory> fo;
    private MembersInjector<FullScreenAdActivity> fp;
    private Provider<String> fq;
    private MembersInjector<ReportExceptions> fr;
    private Provider<ReportExceptions> fs;
    private MembersInjector<ReportExceptions.Factory> ft;
    private Provider<ReportExceptions.Factory> fu;
    private Provider<ReportExceptionsHttpRequest> fv;
    private MembersInjector<ReportExceptionsHttpRequest.Factory> fw;
    private Provider<ReportExceptionsHttpRequest.Factory> fx;
    private MembersInjector<ReportExceptionsHttpResponseHandler> fy;
    private Provider<ReportExceptionsHttpResponseHandler> fz;
    private Provider<Context> g;
    private MembersInjector<VunglePubBase> ga;
    private Provider<String> h;
    private Provider<String> i;
    private MembersInjector<CacheManager> j;
    private Provider<CacheManager> k;
    private Provider<WrapperFramework> l;
    private Provider<em> m;
    private Provider<AudioManager> n;
    private MembersInjector<AudioHelper> o;
    private Provider<AudioHelper> p;
    private Provider<WindowManager> q;
    private Provider<SharedPreferences> r;
    private MembersInjector<AdvertisingDeviceIdStrategy> s;
    private Provider<AdvertisingDeviceIdStrategy> t;
    private Provider<DeviceIdStrategy> u;
    private MembersInjector<AndroidDevice> v;
    private Provider<AndroidDevice> w;
    private Provider<ek> x;
    private MembersInjector<ClientEventListenerAdapter> y;
    private Provider<ClientEventListenerAdapter> z;

    public static final class a {
        public fi a;
        public fk b;
        public EndpointModule c;

        private a() {
        }
    }

    static {
        a = !fj.class.desiredAssertionStatus();
    }

    private fj(a aVar) {
        if (a || aVar != null) {
            this.b = ScopedProvider.create(EventBus_Factory.create());
            this.c = AdEventListener_MembersInjector.create(this.b);
            this.d = ScopedProvider.create(AdEventListener_Factory.create(this.c));
            this.e = Factory_MembersInjector.create(this.d);
            this.f = ScopedProvider.create(Factory_Factory.create(this.e));
            this.g = CoreModule_ProvideApplicationContextFactory.create(aVar.a);
            this.h = CoreModule_ProvideAdTempDirectoryFactory.create(aVar.a, this.g);
            this.i = CoreModule_ProvideOldAdTempDirectoryFactory.create(aVar.a, this.g);
            this.j = fb.a(this.h, this.i);
            this.k = ScopedProvider.create(CacheManager_Factory.create(this.j));
            this.l = CoreModule_ProvideWrapperFrameworkFactory.create(aVar.a);
            this.m = ScopedProvider.create(CoreModule_ProvidePublisherAppFactory.create(aVar.a, this.g, this.l));
            this.n = ScopedProvider.create(CoreModule_ProvideAudioManagerFactory.create(aVar.a, this.g));
            this.o = dk.a(this.n);
            this.p = ScopedProvider.create(AudioHelper_Factory.create(this.o));
            this.q = CoreModule_ProvideWindowManagerFactory.create(aVar.a, this.g);
            this.r = CoreModule_ProvideEnvSharedPreferencesFactory.create(aVar.a, this.g);
            this.J = new DelegateFactory();
            this.s = eg.a(this.g, this.b, this.J);
            this.t = ScopedProvider.create(AdvertisingDeviceIdStrategy_Factory.create(this.s));
            this.u = ScopedProvider.create(IdStrategyModule_ProvideDeviceIdStrategyFactory.create(aVar.b, this.t));
            this.v = ei.a(this.p, this.q, this.g, this.b, this.r, this.u);
            this.w = ScopedProvider.create(AndroidDevice_Factory.create(this.v));
            this.x = ScopedProvider.create(CoreModule_ProvideDeviceFactory.create(aVar.a, this.w));
            this.eq = new DelegateFactory();
            this.y = ew.a(this.b, this.J, this.eq);
            this.z = ClientEventListenerAdapter_Factory.create(this.y);
            this.A = ev.a(this.z);
            this.B = ScopedProvider.create(ClientEventListenerAdapter.Factory_Factory.create(this.A));
            this.C = en.a(this.B, this.g, this.r);
            this.D = ScopedProvider.create(SdkConfig_Factory.create(this.C));
            this.L = new DelegateFactory();
            this.H = new DelegateFactory();
            this.E = cx.a(this.L, this.H);
            this.F = LoggedException_Factory.create(this.E);
            this.G = cw.a(this.L, this.x, this.D, this.F);
            DelegateFactory delegateFactory = (DelegateFactory) this.H;
            this.H = ScopedProvider.create(LoggedException.Factory_Factory.create(this.G));
            delegateFactory.setDelegatedProvider(this.H);
            this.I = bq.a(this.H);
            delegateFactory = (DelegateFactory) this.J;
            this.J = ScopedProvider.create(ScheduledPriorityExecutor_Factory.create(this.I));
            delegateFactory.setDelegatedProvider(this.J);
            this.K = bu.a(this.k, this.b, this.m, this.J);
            delegateFactory = (DelegateFactory) this.L;
            this.L = ScopedProvider.create(DatabaseHelper_Factory.create(this.K, this.g));
            delegateFactory.setDelegatedProvider(this.L);
            this.P = new DelegateFactory();
            this.M = by.a(this.L, this.P);
            this.N = AdReportExtra_Factory.create(this.M);
            this.O = bx.a(this.L, this.N);
            delegateFactory = (DelegateFactory) this.P;
            this.P = ScopedProvider.create(AdReportExtra.Factory_Factory.create(this.O));
            delegateFactory.setDelegatedProvider(this.P);
            this.T = new DelegateFactory();
            this.Q = cf.a(this.L, this.T);
            this.R = EventTracking_Factory.create(this.Q);
            this.S = cc.a(this.L, this.R);
            delegateFactory = (DelegateFactory) this.T;
            this.T = ScopedProvider.create(EventTracking.Factory_Factory.create(this.S));
            delegateFactory.setDelegatedProvider(this.T);
            this.X = new DelegateFactory();
            this.U = ca.a(this.L, this.X);
            this.V = ArchiveEntry_Factory.create(this.U);
            this.W = bz.a(this.L, this.V);
            delegateFactory = (DelegateFactory) this.X;
            this.X = ScopedProvider.create(ArchiveEntry.Factory_Factory.create(this.W));
            delegateFactory.setDelegatedProvider(this.X);
            this.Y = ScopedProvider.create(HttpURLConnectionFactory_Factory.create());
            this.Z = go.a(HttpResponse_Factory.create());
            this.aa = ScopedProvider.create(HttpResponse.Factory_Factory.create(this.Z));
            this.ab = gn.a(HttpRequestChainElement_Factory.create());
            this.ac = ScopedProvider.create(HttpRequestChainElement.Factory_Factory.create(this.ab));
            this.ad = gt.a(this.Y, this.aa, this.ac);
            this.ae = ScopedProvider.create(HttpTransport_Factory.create(this.ad));
            this.af = gs.a(this.ae);
            this.ag = HttpTransaction_Factory.create(this.af);
            this.ah = gd.a(this.x);
            this.ai = ScopedProvider.create(DownloadHttpRequest.Factory_Factory.create(this.ah));
            this.aj = gf.a(this.J, this.H, this.b, this.eq);
            this.ak = DownloadHttpResponseHandler_Factory.create(this.aj);
            this.al = ge.a(this.ak);
            this.am = ScopedProvider.create(DownloadHttpResponseHandler.Factory_Factory.create(this.al));
            this.an = gg.a(this.ag, this.ai, this.am);
            this.ao = ScopedProvider.create(DownloadHttpTransactionFactory_Factory.create(this.an));
            this.ap = gc.a(this.g, this.H, this.J, this.ao);
            this.aq = ScopedProvider.create(DownloadHttpGateway_Factory.create(this.ap));
            this.ar = bt.a(this.g, this.L, this.m);
            this.as = ScopedProvider.create(DatabaseBroadcastReceiver_Factory.create(this.ar));
            this.at = dl.a(this.g, this.b);
            this.au = ScopedProvider.create(ExternalStorageStateBroadcastReceiver_Factory.create(this.at));
            this.av = CoreModule_ProvideConnectivityManagerFactory.create(aVar.a, this.g);
            this.aw = CoreModule_ProvideTelephonyManagerFactory.create(aVar.a, this.g);
            this.aB = new DelegateFactory();
            this.ax = fu.a(this.av, this.aB, this.aw);
            this.ay = ScopedProvider.create(AndroidNetwork_Factory.create(this.ax));
            this.az = ScopedProvider.create(CoreModule_ProvideNetworkFactory.create(aVar.a, this.ay));
            this.aA = fx.a(this.g, this.az, this.b);
            delegateFactory = (DelegateFactory) this.aB;
            this.aB = ScopedProvider.create(NetworkBroadcastReceiver_Factory.create(this.aA));
            delegateFactory.setDelegatedProvider(this.aB);
            this.aC = eo.a(this.b);
            this.aD = ScopedProvider.create(AdThrottleEndRunnable_Factory.create(this.aC));
            this.cO = new DelegateFactory();
            this.aE = hg.a(this.b, this.cO);
            this.aF = ScopedProvider.create(PrepareLocalAdEventListener_Factory.create(this.aE));
            this.aG = fq.a(this.g);
            this.aH = GoogleAggregateDetailedLocationProvider_Factory.create(this.aG);
            this.aI = CoreModule_ProvideGoogleAggregateDetailedLocationProviderFactory.create(aVar.a, this.aH);
            this.aJ = fn.a(this.aI);
            this.aK = ScopedProvider.create(AndroidLocation_Factory.create(this.aJ));
            this.aL = ScopedProvider.create(CoreModule_ProvideLocationFactory.create(aVar.a, this.aK));
            this.aM = EndpointModule_ProvideVungleBaseUrlFactory.create(aVar.c);
            this.aN = CoreModule_ProvideWrapperFrameworkVersionFactory.create(aVar.a);
            this.aO = ScopedProvider.create(ExtraInfo.Factory_Factory.create(MembersInjectors.noOp()));
            this.aP = ScopedProvider.create(UserActionFactory_Factory.create(MembersInjectors.noOp()));
            this.aQ = il.a(this.aP);
            this.aR = ScopedProvider.create(PlayFactory_Factory.create(this.aQ));
            this.aS = ScopedProvider.create(Demographic_Factory.create());
            this.aT = iq.a(this.aL);
            this.aU = ScopedProvider.create(Location.Factory_Factory.create(this.aT));
            this.aV = ip.a(this.g, this.aS, this.aU);
            this.aW = ScopedProvider.create(Demographic.Factory_Factory.create(this.aV));
            this.aX = ScopedProvider.create(AdConfig_Factory.create());
            this.aY = ir.a(this.x);
            this.aZ = ScopedProvider.create(DisplayDimension.Factory_Factory.create(this.aY));
            this.ba = is.a(this.aX, this.x, this.aZ, this.az, this.m);
            this.bb = ScopedProvider.create(DeviceInfo.Factory_Factory.create(this.ba));
            this.bf = new DelegateFactory();
            this.bc = ce.a(this.L, this.bf);
            this.bd = EventTrackingHttpLogEntry_Factory.create(this.bc);
            this.be = cd.a(this.L, this.bd);
            delegateFactory = (DelegateFactory) this.bf;
            this.bf = ScopedProvider.create(EventTrackingHttpLogEntry.Factory_Factory.create(this.be));
            delegateFactory.setDelegatedProvider(this.bf);
            this.bg = ScopedProvider.create(HttpLogEntry.Factory_Factory.create(MembersInjectors.noOp()));
            this.cS = new DelegateFactory();
            this.bh = iv.a(this.aW, this.x, this.bb, this.m, this.bf, this.bg, this.cS);
            this.bi = ScopedProvider.create(RequestLocalAd.Factory_Factory.create(this.bh));
            this.bj = im.a(this.aO, this.aR, this.bi);
            this.bk = ScopedProvider.create(ReportLocalAd.Factory_Factory.create(this.bj));
            this.bl = hk.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.bk);
            this.bm = ScopedProvider.create(ReportLocalAdHttpRequest.Factory_Factory.create(this.bl));
            this.bn = hf.a(this.bf);
            this.bo = ScopedProvider.create(EventTrackingHttpLogEntryDeleteDelegate_Factory.create(this.bn));
            this.dU = new DelegateFactory();
            this.bp = hl.a(this.J, this.H, this.dU, this.bo);
            this.bq = ScopedProvider.create(ReportLocalAdHttpResponseHandler_Factory.create(this.bp));
            this.br = ScopedProvider.create(PlayFactory.UserActionFactory_Factory.create(MembersInjectors.noOp()));
            this.bs = in.a(this.br);
            this.bt = ScopedProvider.create(ReportStreamingAd.Factory.PlayFactory_Factory.create(this.bs));
            this.bu = ix.a(this.aW, this.x, this.bb, this.m, this.aO);
            this.bv = ScopedProvider.create(RequestStreamingAd.Factory_Factory.create(this.bu));
            this.bw = io.a(this.aO, this.bt, this.bv);
            this.bx = ScopedProvider.create(ReportStreamingAd.Factory_Factory.create(this.bw));
            this.by = hm.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.bx);
            this.bz = ScopedProvider.create(ReportStreamingAdHttpRequest.Factory_Factory.create(this.by));
            this.bA = hn.a(this.J, this.H, this.dU);
            this.bB = ScopedProvider.create(ReportStreamingAdHttpResponseHandler_Factory.create(this.bA));
            this.bC = hj.a(this.ag, this.bm, this.bq, this.bz, this.bB);
            this.bD = ScopedProvider.create(ReportAdHttpTransactionFactory_Factory.create(this.bC));
            this.bE = ScopedProvider.create(RequestConfigHttpRequest_Factory.create(MembersInjectors.noOp()));
            this.bF = iu.a(this.x, this.m);
            this.bG = ScopedProvider.create(RequestConfig_Factory.create(this.bF));
            this.bH = hq.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.bE, this.bG);
            this.bI = ScopedProvider.create(RequestConfigHttpRequest.Factory_Factory.create(this.bH));
            this.bJ = ScopedProvider.create(RequestConfigResponse.Factory_Factory.create(MembersInjectors.noOp()));
            this.bK = ho.a(this.cO);
            this.bL = ScopedProvider.create(RequestConfigRunnable_Factory.create(this.bK));
            this.bM = hp.a(this.J, this.bL);
            this.bN = ScopedProvider.create(RequestConfigAsync_Factory.create(this.bM));
            this.bO = hs.a(this.J, this.H, this.bJ, this.D, this.b, this.bN);
            this.bP = RequestConfigHttpResponseHandler_Factory.create(this.bO);
            this.bQ = ht.a(this.ag, this.bI, this.bP);
            this.bR = ScopedProvider.create(RequestConfigHttpTransactionFactory_Factory.create(this.bQ));
            this.bS = hu.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.bi);
            this.bT = ScopedProvider.create(RequestLocalAdHttpRequest.Factory_Factory.create(this.bS));
            this.bU = ScopedProvider.create(AdServiceReportingHandler_Factory.create());
            this.bV = ScopedProvider.create(CallToActionOverlay.Factory_Factory.create(MembersInjectors.noOp()));
            this.bW = ScopedProvider.create(PlayCheckpoint.Factory_Factory.create(MembersInjectors.noOp()));
            this.bX = it.a(this.bW);
            this.bY = ScopedProvider.create(ThirdPartyAdTracking.Factory_Factory.create(this.bX));
            this.bZ = iw.a(this.bV, this.bY);
            this.ca = ScopedProvider.create(RequestLocalAdResponse.Factory_Factory.create(this.bZ));
            this.cb = hv.a(this.J, this.H, this.bU, this.b, this.bo, this.eq, this.cS, this.ca, this.cO);
            this.cc = ScopedProvider.create(RequestLocalAdHttpResponseHandler_Factory.create(this.cb));
            this.cd = hw.a(this.ag, this.bT, this.cc);
            this.ce = ScopedProvider.create(RequestLocalAdHttpTransactionFactory_Factory.create(this.cd));
            this.cf = hx.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.bv);
            this.cg = ScopedProvider.create(RequestStreamingAdHttpRequest.Factory_Factory.create(this.cf));
            this.ch = iy.a(this.bV, this.bY);
            this.ci = ScopedProvider.create(RequestStreamingAdResponse.Factory_Factory.create(this.ch));
            this.cj = hy.a(this.J, this.H, this.b, this.ci);
            this.ck = ScopedProvider.create(RequestStreamingAdHttpResponseHandler_Factory.create(this.cj));
            this.cl = hz.a(this.ag, this.cg, this.ck);
            this.cm = ScopedProvider.create(RequestStreamingAdHttpTransactionFactory_Factory.create(this.cl));
            this.cn = SafeBundleAdConfigFactory_MembersInjector.create(this.aX);
            this.co = ScopedProvider.create(SafeBundleAdConfigFactory_Factory.create(this.cn));
            this.cp = ja.a(this.x, this.m);
            this.cq = ScopedProvider.create(SessionStart.Factory_Factory.create(this.cp));
            this.cr = iz.a(this.cq);
            this.cs = ScopedProvider.create(SessionEnd.Factory_Factory.create(this.cr));
            this.ct = ia.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.cs);
            this.cu = ScopedProvider.create(SessionEndHttpRequest.Factory_Factory.create(this.ct));
            this.cv = gj.a(this.J, this.H);
            this.cw = FireAndForgetHttpResponseHandler_Factory.create(this.cv);
            this.cx = ib.a(this.ag, this.cu, this.cw);
            this.cy = ScopedProvider.create(SessionEndHttpTransactionFactory_Factory.create(this.cx));
            this.cz = ic.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.cq);
            this.cA = ScopedProvider.create(SessionStartHttpRequest.Factory_Factory.create(this.cz));
            this.cB = id.a(this.ag, this.cA, this.cw);
            this.cC = ScopedProvider.create(SessionStartHttpTransactionFactory_Factory.create(this.cB));
            this.cD = ie.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.bi);
            this.cE = ScopedProvider.create(TrackInstallHttpRequest.Factory_Factory.create(this.cD));
            this.cF = if.a(this.J, this.H, this.cS);
            this.cG = ScopedProvider.create(TrackInstallHttpResponseHandler_Factory.create(this.cF));
            this.cH = ig.a(this.ag, this.cE, this.cG);
            this.cI = ScopedProvider.create(TrackInstallHttpTransactionFactory_Factory.create(this.cH));
            this.cJ = ih.a(this.x, this.aL, this.m, this.aM, this.l, this.aN, this.bi);
            this.cK = ScopedProvider.create(UnfilledAdHttpRequest.Factory_Factory.create(this.cJ));
            this.cL = ii.a(this.ag, this.cK, this.cw);
            this.cM = ScopedProvider.create(UnfilledAdHttpTransactionFactory_Factory.create(this.cL));
            this.cN = hh.a(this.g, this.H, this.J, this.b, this.cS, this.aF, this.bD, this.bR, this.ce, this.cm, this.co, this.cy, this.cC, this.cI, this.cM, this.bU);
            delegateFactory = (DelegateFactory) this.cO;
            this.cO = ScopedProvider.create(ProtocolHttpGateway_Factory.create(this.cN));
            delegateFactory.setDelegatedProvider(this.cO);
            this.cP = ep.a(this.b, this.cS);
            this.cQ = ScopedProvider.create(EndAdEventListener_Factory.create(this.cP));
            this.cR = eq.a(this.g, this.as, this.x, this.b, this.au, this.aB, this.J, this.aD, this.cO, this.H, this.cQ, this.r);
            delegateFactory = (DelegateFactory) this.cS;
            this.cS = ScopedProvider.create(SdkState_Factory.create(this.cR));
            delegateFactory.setDelegatedProvider(this.cS);
            this.cT = cv.a(this.aq, this.x, this.cS);
            this.cU = LocalViewableDelegate_Factory.create(this.cT);
            this.da = new DelegateFactory();
            this.dk = new DelegateFactory();
            this.cV = cq.a(this.L, this.da, this.H, this.X, this.dk, this.cU);
            this.cW = LocalArchive_Factory.create(this.cV);
            this.cX = cu.a(this.cU, this.aq);
            this.cY = ScopedProvider.create(LocalViewableDelegate.Factory_Factory.create(this.cX));
            this.cZ = cp.a(this.L, this.cW, this.cY);
            delegateFactory = (DelegateFactory) this.da;
            this.da = ScopedProvider.create(LocalArchive.Factory_Factory.create(this.cZ));
            delegateFactory.setDelegatedProvider(this.da);
            this.db = dj.a(this.L);
            this.dc = ScopedProvider.create(Viewable.Factory_Factory.create(this.db));
            this.dd = co.a(this.L, this.dk);
            this.de = LocalAd_Factory.create(this.dd);
            this.di = new DelegateFactory();
            this.df = cs.a(this.L, this.dk, this.di);
            this.dg = LocalVideo_Factory.create(this.df);
            this.dh = cr.a(this.L, this.dg, this.cY);
            delegateFactory = (DelegateFactory) this.di;
            this.di = ScopedProvider.create(LocalVideo.Factory_Factory.create(this.dh));
            delegateFactory.setDelegatedProvider(this.di);
            this.dj = ch.a(this.L, this.T, this.b, this.h, this.da, this.dc, this.de, this.di, this.J);
            delegateFactory = (DelegateFactory) this.dk;
            this.dk = ScopedProvider.create(LocalAd.Factory_Factory.create(this.dj));
            delegateFactory.setDelegatedProvider(this.dk);
            this.do = new DelegateFactory();
            this.ds = new DelegateFactory();
            this.dl = cm.a(this.L, this.do, this.ds);
            this.dm = LocalAdReportEvent_Factory.create(this.dl);
            this.dn = cl.a(this.L, this.dm);
            delegateFactory = (DelegateFactory) this.do;
            this.do = ScopedProvider.create(LocalAdReportEvent.Factory_Factory.create(this.dn));
            delegateFactory.setDelegatedProvider(this.do);
            this.dp = cj.a(this.L, this.ds, this.do);
            this.dq = LocalAdPlay_Factory.create(this.dp);
            this.dr = ci.a(this.L, this.dq, this.do);
            delegateFactory = (DelegateFactory) this.ds;
            this.ds = ScopedProvider.create(LocalAdPlay.Factory_Factory.create(this.dr));
            delegateFactory.setDelegatedProvider(this.ds);
            this.dw = new DelegateFactory();
            this.dt = cn.a(this.L, this.P, this.dw, this.ds);
            this.du = LocalAdReport_Factory.create(this.dt);
            this.dv = ck.a(this.L, this.P, this.dk, this.ds, this.du);
            delegateFactory = (DelegateFactory) this.dw;
            this.dw = ScopedProvider.create(LocalAdReport.Factory_Factory.create(this.dv));
            delegateFactory.setDelegatedProvider(this.dw);
            this.dA = new DelegateFactory();
            this.dx = de.a(this.L, this.dA);
            this.dy = StreamingAdReportEvent_Factory.create(this.dx);
            this.dz = dd.a(this.L, this.dy);
            delegateFactory = (DelegateFactory) this.dA;
            this.dA = ScopedProvider.create(StreamingAdReportEvent.Factory_Factory.create(this.dz));
            delegateFactory.setDelegatedProvider(this.dA);
            this.dE = new DelegateFactory();
            this.dB = db.a(this.L, this.dE, this.dA);
            this.dC = StreamingAdPlay_Factory.create(this.dB);
            this.dD = da.a(this.L, this.dC, this.dA);
            delegateFactory = (DelegateFactory) this.dE;
            this.dE = ScopedProvider.create(StreamingAdPlay.Factory_Factory.create(this.dD));
            delegateFactory.setDelegatedProvider(this.dE);
            this.dM = new DelegateFactory();
            this.dF = dg.a(this.L, this.dM);
            this.dG = StreamingAd_Factory.create(this.dF);
            this.dK = new DelegateFactory();
            this.dH = di.a(this.L, this.dM, this.dK);
            this.dI = StreamingVideo_Factory.create(this.dH);
            this.dJ = dh.a(this.L, this.dI);
            delegateFactory = (DelegateFactory) this.dK;
            this.dK = ScopedProvider.create(StreamingVideo.Factory_Factory.create(this.dJ));
            delegateFactory.setDelegatedProvider(this.dK);
            this.dL = cz.a(this.L, this.T, this.b, this.dG, this.dK);
            delegateFactory = (DelegateFactory) this.dM;
            this.dM = ScopedProvider.create(StreamingAd.Factory_Factory.create(this.dL));
            delegateFactory.setDelegatedProvider(this.dM);
            this.dQ = new DelegateFactory();
            this.dN = df.a(this.L, this.P, this.dQ, this.dE);
            this.dO = StreamingAdReport_Factory.create(this.dN);
            this.dP = dc.a(this.L, this.P, this.dE, this.dM, this.dO);
            delegateFactory = (DelegateFactory) this.dQ;
            this.dQ = ScopedProvider.create(StreamingAdReport.Factory_Factory.create(this.dP));
            delegateFactory.setDelegatedProvider(this.dQ);
            this.dR = bw.a(this.L, this.dw, this.dQ);
            this.dS = ScopedProvider.create(AdReport.Factory_Factory.create(this.dR));
            this.dT = jd.a(this.b, this.dS, this.dw, this.cO, this.cS, this.dQ, this.H);
            delegateFactory = (DelegateFactory) this.dU;
            this.dU = ScopedProvider.create(AdReportManager_Factory.create(this.dT));
            delegateFactory.setDelegatedProvider(this.dU);
            this.dV = bn.a(this.b, this.H);
            this.dW = PrepareViewableRunnable_Factory.create(this.dV);
            this.dX = bm.a(this.dW);
            this.dY = ScopedProvider.create(PrepareViewableRunnable.Factory_Factory.create(this.dX));
            this.dZ = ScopedProvider.create(RetryMap_Factory.create());
            this.ea = bl.a(this.b, this.eq, this.dU, this.J, this.dY, this.dZ, this.H);
            this.eb = PrepareAdRunnable_Factory.create(this.ea);
            this.ec = bk.a(this.eb);
            this.ed = ScopedProvider.create(PrepareAdRunnable.Factory_Factory.create(this.ec));
            this.eh = new DelegateFactory();
            this.ee = f.a(this.b, this.J, this.dY, this.eh);
            this.ef = ScopedProvider.create(ViewablePreparationListener_Factory.create(this.ee));
            this.eg = g.a(this.ed, this.ef, this.J);
            delegateFactory = (DelegateFactory) this.eh;
            this.eh = ScopedProvider.create(AdPreparer_Factory.create(this.eg));
            delegateFactory.setDelegatedProvider(this.eh);
            this.ei = CoreModule_ProvideFullScreenAdActivityClassFactory.create(aVar.a);
            this.ej = c.a(this.b, this.eq, this.H);
            this.ek = ScopedProvider.create(PlayAdEventListener_Factory.create(this.ej));
            this.el = b.a(this.b, this.eq);
            this.em = ScopedProvider.create(AdAvailabilityEventListener_Factory.create(this.el));
            this.en = d.a(this.b, this.dM);
            this.eo = PrepareStreamingAdEventListener_Factory.create(this.en);
            this.ep = e.a(this.eh, this.g, this.x, this.b, this.ei, this.J, this.dk, this.az, this.ek, this.em, this.eo, this.cO, this.D, this.dM, this.dc, this.cS, this.H);
            delegateFactory = (DelegateFactory) this.eq;
            this.eq = ScopedProvider.create(AdManager_Factory.create(this.ep));
            delegateFactory.setDelegatedProvider(this.eq);
            this.er = hc.a(this.x);
            this.es = ScopedProvider.create(TrackEventHttpRequest.Factory_Factory.create(this.er));
            this.et = hd.a(this.J, this.H, this.bf);
            this.eu = TrackEventHttpResponseHandler_Factory.create(this.et);
            this.ev = he.a(this.ag, this.es, this.eu);
            this.ew = ScopedProvider.create(TrackEventHttpTransactionFactory_Factory.create(this.ev));
            this.ex = gi.a(this.g, this.H, this.J, this.ew);
            this.ey = ExternalHttpGateway_Factory.create(this.ex);
            this.ez = jc.a(this.b, this.bU, this.dS, this.dU, this.H, this.ey);
            this.eA = ScopedProvider.create(AdReportEventListener_Factory.create(this.ez));
            this.eB = jb.a(this.eA);
            this.eC = ScopedProvider.create(AdReportEventListener.Factory_Factory.create(this.eB));
            this.eD = ScopedProvider.create(AlertDialogFactory_Factory.create());
            this.eE = fg.a(this.g);
            this.eF = ScopedProvider.create(AssetBitmapFactory_Factory.create(this.eE));
            this.eG = ScopedProvider.create(CoreModule_ProvideBitmapFactoryFactory.create(aVar.a, this.eF));
            this.eH = du.a(this.g);
            this.eI = ScopedProvider.create(DisplayUtils_Factory.create(this.eH));
            this.eJ = jl.a(this.eG, this.H);
            this.eK = ScopedProvider.create(ViewUtils_Factory.create(this.eJ));
            this.eL = dz.a(this.eK, this.b);
            this.eM = ScopedProvider.create(PrivacyButton.Factory_Factory.create(this.eL));
            this.eN = ea.a(this.g, this.eI);
            this.eO = ScopedProvider.create(ProgressBar.Factory_Factory.create(this.eN));
            this.eP = dv.a(this.g, this.eK, this.p, this.b);
            this.eQ = ScopedProvider.create(MuteButton.Factory_Factory.create(this.eP));
            this.eR = av.a(this.p);
            this.eS = ScopedProvider.create(VolumeChangeEvent.Factory_Factory.create(this.eR));
            this.eT = br.a(this.p, this.eS, this.b, this.g);
            this.eU = ScopedProvider.create(VolumeChangeContentObserver_Factory.create(this.eT));
            this.eV = ed.a(this.b);
            this.eW = ScopedProvider.create(VideoEventListener_Factory.create(this.eV));
            this.eX = ec.a(this.eW);
            this.eY = ScopedProvider.create(VideoEventListener.Factory_Factory.create(this.eX));
            this.fc = new DelegateFactory();
            this.eZ = ee.a(this.eD, this.eG, this.eI, this.b, this.fc, this.eM, this.eO, this.eQ, this.H, this.x, this.eK, this.eU, this.eY, this.p);
            this.fa = VideoFragment_Factory.create(this.eZ);
            this.fb = eb.a(this.fa);
            delegateFactory = (DelegateFactory) this.fc;
            this.fc = ScopedProvider.create(VideoFragment.Factory_Factory.create(this.fb));
            delegateFactory.setDelegatedProvider(this.fc);
            this.fd = ScopedProvider.create(WebViewConfig_Factory.create(MembersInjectors.noOp()));
            this.fe = dt.a(this.b, this.fd);
            this.ff = ScopedProvider.create(AdWebViewClient_Factory.create(this.fe));
            this.fg = ef.a(this.g);
            this.fh = ScopedProvider.create(WebViewFactory_Factory.create(this.fg));
            this.fi = ds.a(this.b);
            this.fj = ScopedProvider.create(AdWebChromeClient_Factory.create(this.fi));
            this.fk = dy.a(this.x, this.ff, this.fh, this.b, this.fj);
            this.fl = PostRollFragment_Factory.create(this.fk);
            this.fm = dx.a(this.fl);
            this.fn = ScopedProvider.create(PostRollFragment.Factory_Factory.create(this.fm));
            this.fo = ScopedProvider.create(IntentFactory_Factory.create());
            this.fp = FullScreenAdActivity_MembersInjector.create(this.f, this.eq, this.eC, this.x, this.b, this.fc, this.fn, this.cS, this.fo, this.H, this.l);
            this.fq = EndpointModule_ProvideIngestBaseUrlFactory.create(aVar.c);
            this.fr = ik.a(this.x, this.m);
            this.fs = ReportExceptions_Factory.create(this.fr);
            this.ft = ij.a(this.fs);
            this.fu = ScopedProvider.create(ReportExceptions.Factory_Factory.create(this.ft));
            this.fv = ReportExceptionsHttpRequest_Factory.create(MembersInjectors.noOp());
            this.fw = gw.a(this.x, this.fq, this.fu, this.fv);
            this.fx = ScopedProvider.create(ReportExceptionsHttpRequest.Factory_Factory.create(this.fw));
            this.fy = gy.a(this.J, this.H);
            this.fz = ReportExceptionsHttpResponseHandler_Factory.create(this.fy);
            this.fA = gx.a(this.fz);
            this.fB = ScopedProvider.create(ReportExceptionsHttpResponseHandler.Factory_Factory.create(this.fA));
            this.fC = gz.a(this.ag, this.fx, this.fB);
            this.fD = ScopedProvider.create(ReportExceptionsHttpTransactionFactory_Factory.create(this.fC));
            this.fE = AppFingerprintHttpRequest_Factory.create(MembersInjectors.noOp());
            this.fF = fz.a(this.x, this.fq, this.fE);
            this.fG = ScopedProvider.create(AppFingerprintHttpRequest.Factory_Factory.create(this.fF));
            this.fH = ga.a(this.J, this.H, this.D);
            this.fI = ScopedProvider.create(AppFingerprintHttpResponseHandler_Factory.create(this.fH));
            this.fJ = gb.a(this.ag, this.fG, this.fI);
            this.fK = ScopedProvider.create(AppFingerprintHttpTransactionFactory_Factory.create(this.fJ));
            this.fL = gv.a(this.g, this.H, this.J, this.fD, this.fK);
            this.fM = IngestHttpGateway_Factory.create(this.fL);
            this.fN = ez.a(this.fM, this.D, this.H);
            this.fO = ScopedProvider.create(ExceptionManager_Factory.create(this.fN));
            this.fP = InitialConfigUpdatedEventListener_MembersInjector.create(this.b, this.fO);
            this.fQ = ScopedProvider.create(InitialConfigUpdatedEventListener_Factory.create(this.fP));
            this.fR = AppFingerprint_Factory.create(MembersInjectors.noOp());
            this.fS = dm.a(this.x, this.g, this.fR);
            this.fT = ScopedProvider.create(AppFingerprint.Factory_Factory.create(this.fS));
            this.fU = dn.a(this.D, this.fT, this.fM, this.J, this.H);
            this.fV = ScopedProvider.create(AppFingerprintManager_Factory.create(this.fU));
            this.fW = GlobalEventListener_MembersInjector.create(this.b, this.fV);
            this.fX = ScopedProvider.create(GlobalEventListener_Factory.create(this.fW));
            this.fY = InitializationEventListener_MembersInjector.create(this.b, this.eq, this.J, this.cO, this.dU, this.fQ, this.fX, this.cS);
            this.fZ = ScopedProvider.create(InitializationEventListener_Factory.create(this.fY));
            this.ga = VunglePubBase_MembersInjector.create(this.eq, this.fZ, this.k, this.L, this.aS, this.x, this.b, this.aX, this.co, this.D, this.cS, this.g);
            return;
        }
        throw new AssertionError();
    }

    public static a a() {
        return new a();
    }

    public final void a(FullScreenAdActivity fullScreenAdActivity) {
        this.fp.injectMembers(fullScreenAdActivity);
    }

    public final void a(VideoFragment videoFragment) {
        this.eZ.injectMembers(videoFragment);
    }

    public final void a(VunglePubBase vunglePubBase) {
        this.ga.injectMembers(vunglePubBase);
    }

    public final void a(fp fpVar) {
        this.aG.injectMembers(fpVar);
    }

    public final void a(AndroidDevice androidDevice) {
        this.v.injectMembers(androidDevice);
    }

    public final void a(AndroidLocation androidLocation) {
        this.aJ.injectMembers(androidLocation);
    }

    public final void a(AndroidNetwork androidNetwork) {
        this.ax.injectMembers(androidNetwork);
    }

    public final void a(AssetBitmapFactory assetBitmapFactory) {
        this.eE.injectMembers(assetBitmapFactory);
    }
}
